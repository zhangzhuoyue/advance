<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzy.dao.UserDao">
    <!--查询-->
    <select id="findAll" resultType="User">
        select * from user
    </select>

    <!--增加-->
    <insert id="insertUser" parameterType="com.zzy.pojo.User">
        insert into user (id,username,password,birthady)values (#{id},#{username},#{password},#{birthady})
    </insert>
    <!--更新-->
    <update id="updateUser" parameterType="com.zzy.pojo.User">
        update user set username = #{username} , birthady = #{birthady} where  id = #{id}
    </update>
    <!--删除-->
   <!-- <delete id="deleteUser" parameterType="integer">
        delete from user where id =#{id}
    </delete>-->

    <!--多条件查询-->
    <select id="findByCondition" parameterType="user" resultType="user">
        select * from user
        <where>
        <if test="id != null">
            and id  = #{id}
        </if>
        <if test="username != null">
            and username = #{username}
        </if>
        </where>
    </select>

    <select id="findusers" parameterType="list" resultType="user">
        select id,username,password,birthady,create_time createTime,create_time1 createTime1,create_time2 createTime2  from user
        /*
        collection: 要做foreach的对象，作为入参时，List对象默认用"list"代替作为键，数组对象有"array"代替作为键，Map对象没有默认的键。当然在作为入参时可以使用@Param("keyName")来设置键，设置keyName后，list,array将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：如果User有属性List ids。入参是User对象，那么这个collection = "ids".如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = "ids.id"
        在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：

        如果传入的是单参数且参数类型是一个List的时候，collection属性值为list .
        如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array .
        如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key.
        https://www.cnblogs.com/fnlingnzb-learner/p/10566452.html
        */
        <where>
            <foreach collection="list" item="kk" index="id" separator="," open="id in ("  close=")">
                #{id}
            </foreach>
        </where>
    </select>

    <!---->
    <select id="getUser" parameterType="user" resultType="user">
        select id,username,password,birthady,create_time createTime,create_time1 createTime1,create_time2 createTime2 from `user` where id =#{id}
    </select>

    <insert id="insertUser1" parameterType="user">
        insert into `user` (id,username,password,birthady,create_time,create_time2) values
        (#{id} ,#{username},#{password},#{birthady},#{createTime},#{createTime2})
    </insert>

    <!--时间范围查询 传递参数是date时间函数-->
    <select id="findUserByTime" parameterType="map" resultType="map">
        <![CDATA[select password,username from user where create_time >= #{beginTime} and create_time <= #{endTime}]]>
    </select>
    <!--时间查询 ，传递参数是字符串，需要数据库函数转换-->
    <select id="findUserByStringTime" resultType="map" >
        <![CDATA[  select id,username,password,birthady,create_time createTime,create_time1 createTime1,create_time2 createTime2 from user where create_time >= str_to_date(#{beginDate},'%Y-%m-%d') and create_time <= str_to_date(#{endDate},'%Y-%m-%d')]]>
    </select>

    <!--根据时间戳范围查询  查询条件是时间java.util.date-->
    <select id="findUsersByTimestamp" resultType="user" >
        <![CDATA[select id,username,password,birthady,create_time createTime,create_time1 createTime1,create_time2 createTime2  from `user` where create_time2 >= #{beginDate} and create_time2 <= #{endDate}]]>
    </select>
    <!--根据时间戳范围查询  查询条件是时间String-->
    <select id="findUsersByTimestampString" resultType="user" >
        <![CDATA[select id,username,password,birthady,create_time createTime,create_time1 createTime1,create_time2 createTime2  from `user` where create_time2 >= str_to_date(#{beginDate},'%Y-%m-%d %H:%i:%s') and create_time2 <= str_to_date(#{endDate},'%Y-%m-%d %H:%i:%s')]]>
    </select>

    <select id="findByMap" resultType="map" >
        select * from user where id=#{map.id}
    </select>
</mapper>
